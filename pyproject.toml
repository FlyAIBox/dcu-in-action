[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "dcu-in-action"
version = "1.0.0"
description = "海光DCU加速卡实战指南 - 大模型训练、微调、推理与HPC科学计算"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "DCU Community", email = "community@sourcefind.cn"}
]
maintainers = [
    {name = "DCU Community", email = "community@sourcefind.cn"}
]
keywords = [
    "DCU", "深度学习", "大模型", "人工智能", "HPC", 
    "PyTorch", "机器学习", "科学计算", "GPU加速"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Hardware",
]
requires-python = ">=3.8"
dependencies = [
    "torch>=2.1.0",
    "transformers>=4.35.0",
    "numpy>=1.21.0",
    "accelerate>=0.24.0",
    "datasets>=2.14.0",
    "scipy>=1.7.0",
    "matplotlib>=3.5.0",
    "pandas>=1.5.0",
    "tqdm>=4.65.0",
    "pyyaml>=6.0",
    "click>=8.1.0",
]

[project.optional-dependencies]
# 完整功能依赖
full = [
    "vllm>=0.2.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "gradio>=3.40.0",
    "streamlit>=1.25.0",
    "jupyter>=1.0.0",
    "notebook>=6.4.0",
    "wandb>=0.15.0",
    "tensorboard>=2.13.0",
    "psutil>=5.9.0",
]

# 科学计算依赖
science = [
    "cupy-cuda11x>=11.0.0",
    "numba>=0.56.0",
    "scikit-learn>=1.1.0",
    "seaborn>=0.11.0",
    "plotly>=5.0.0",
    "mpi4py>=3.1.0",
    "dask[complete]>=2023.5.0",
]

# 推理优化依赖
inference = [
    "vllm>=0.2.0",
    "bitsandbytes>=0.41.0",
    "auto-gptq>=0.4.0",
    "optimum>=1.15.0",
    "sentence-transformers>=2.2.0",
    "faiss-gpu>=1.7.4",
]

# Web服务依赖
web = [
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "gradio>=3.40.0",
    "streamlit>=1.25.0",
    "aiohttp>=3.8.0",
]

# 开发工具依赖
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
]

[project.urls]
Homepage = "https://github.com/hygon-technologies/dcu-in-action"
Documentation = "https://developer.sourcefind.cn/"
Repository = "https://github.com/hygon-technologies/dcu-in-action.git"
Issues = "https://github.com/hygon-technologies/dcu-in-action/issues"
Changelog = "https://github.com/hygon-technologies/dcu-in-action/blob/main/CHANGELOG.md"

[project.scripts]
dcu-test = "examples.llm_inference.simple_test:main"
dcu-monitor = "scripts.utils.monitor_performance:main"
dcu-check = "scripts.setup.check_environment:main"

[tool.setuptools]
package-dir = {"" = "."}
packages = ["examples", "scripts", "docs"]

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.yaml", "*.yml", "*.json"]

# Black代码格式化配置
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # 排除的目录
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort导入排序配置
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["examples", "scripts"]
known_third_party = ["torch", "transformers", "numpy", "pandas"]

# mypy类型检查配置
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "vllm.*",
    "cupy.*",
    "numba.*",
    "faiss.*",
    "gradio.*",
    "streamlit.*",
]
ignore_missing_imports = true

# pytest测试配置
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU",
    "unit: marks tests as unit tests",
]

# Coverage配置
[tool.coverage.run]
source = ["examples", "scripts"]
omit = ["*/tests/*", "*/test_*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Flake8代码检查配置
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "E501", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "*.pyc",
    ".pytest_cache",
    ".mypy_cache",
    "build",
    "dist",
    "*.egg-info",
]
per-file-ignores = [
    "__init__.py:F401",
    "examples/*:E402",
] 